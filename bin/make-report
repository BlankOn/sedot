#!/usr/bin/env python

from os import path
import sys
import os
import time
import rfc822

#
# Preparation
#

# Base directory

abs = path.abspath(sys.argv[0])
base = path.dirname(path.dirname(abs))

# Config

config_file = path.join(base, "etc", "config.sh")
f = open(config_file)
for line in f.readlines():
	p = line.strip().split("=")
	if p[0].strip() == "BASE":
		base = p[1].strip().strip('"').strip("'")
	elif p[0].strip() == "MIRROR_NAME":
		mirror_name = p[1].strip().strip('"').strip("'")

# Packages

pkgs_file = path.join(base, "etc", "report.pkgs")
pkgs = []
for line in open(pkgs_file).readlines():
	pkgs.append(line.strip())

#
# Functions
#

def status_read(status_file):
	
	status = {}

	f = open(status_file)
	for line in f.readlines():
		line = line.strip()
		pos = line.find(" ")

		key = line[:pos]
		val = line[pos+1:]

		status[key] = val

	return status

#
# Class
#

class Package:
	
	def __init__(self, pkg):
		self.pkg = pkg
		self._load()
		self.reports = {}
		self.reports['last'] = None
		self.reports['sync'] = None
		self.usage = -1

	def _load(self):
		global base

		pkgdir = path.join(base, "pkgs", self.pkg)

		self.target = self._read(pkgdir, "target")
		self.source = self._read(pkgdir, "source")
		self.name = self._read(pkgdir, "name")
		self.usage = self._get_usage()

	def _read(self, dir, file):
		f = open(path.join(dir, file))
		if f:
			return f.readline().strip()
		else:
			return None

	def add_report(self, report, last=False, sync=False):
		if sync:
			self.reports['sync'] = report
		elif last:
			self.reports['last'] = report

	def _get_usage(self):
		global base

		size_file = path.join(base, "log", "size", "%s.size" % self.pkg)

		if path.isfile(size_file):
			f = open(size_file)
			lines = f.readlines()
			last = lines[-1].strip()

			p = last.split(" ")
			return int(p[1])

		else:
			return -1


class ReportGenerator:
	
	def __init__(self, packages, out):
		self.packages = packages
		self.out = out

	def generate(self):
		self._print_page_header()

		self._print_header()
		self._print_menu()
		self._print_content()

		self._print_page_footer()

	def _print_page_header(self):
		global mirror_name
		self.out.write("""<html><head>
<title>%s</title>
<link rel="stylesheet" type="text/css" href="css/style.css"/>
<script type="text/javascript" src="js/jquery.js"></script>
<script type="text/javascript" src="js/page.js"></script>
</head><body>""" % mirror_name)

	def _print_page_footer(self):
		generated = time.strftime("%a, %d %b %Y %H:%M:%S %z")

		self.out.write("""<div id="footer">Last updated: %s</div>""" % generated)
		self.out.write("""</body></html>""")

	def _print_header(self):
		global mirror_name
		self.out.write("""<h1>%s</h1>""" % mirror_name)

	def _print_menu(self):
		
		self.out.write("""<div id="menu"><ul>""")
		
		for pkg in self.packages:
			if pkg.reports.get('last', None) == None:
				continue

			self.out.write("""<li><a href="#%s">%s</a></li> """ % (pkg.pkg, pkg.name.replace(" ", "&nbsp;")))

		self.out.write("""</ul></div>""")

	def _print_content(self):

		self.out.write("""<div id="content">""")

		for pkg in self.packages:

			if pkg.reports.get('last', None) == None:
				continue

			last_updated = pkg.reports['last']['finish']
			last_updated_delta = self._time_delta(last_updated)
			last_updated_delta_txt = self._time_delta_txt(last_updated_delta)

			status = self._get_status(last_updated_delta)
			status_txt = self._get_status_txt(status)

			if pkg.usage == -1:
				usage = "Unknown"
				usage_img = ""
			else:
				usage = "%s MB" % int(pkg.usage / 1024)
				usage_img = '<br/><img src="img/size/%s.png"/>' % pkg.pkg

			self.out.write("""<div class="pkg" id="%s">""" % pkg.pkg)
			self.out.write("""<h2>%s</h2>""" % pkg.name)
			self.out.write("<ul>")
			self.out.write("<li>Status: %s</li>" % status_txt)
			self.out.write("<li>Last updated: %s (%s)</li>" % (last_updated, last_updated_delta_txt))
			self.out.write("<li>Source: %s</li>" % pkg.source)
			self.out.write("""<li>Disk usage: %s %s</li>""" % (usage, usage_img))
			self.out.write("</ul>")

			self.out.write("""</div>""")

		self.out.write("""</div>""")

	def _time_delta(self, t):
		lu = rfc822.parsedate(t)
		ep = time.mktime(lu)
		now = time.time()

		delta = now - ep;

		return delta

	def _time_delta_tuple(self, delta):

		dweek = 3600 * 24 * 7
		dday = 3600 * 24
		dhour = 3600
		dmin = 60

		# delta

		week = int(delta / dweek)
		delta = delta % dweek

		day = int(delta / dday)
		delta = delta % dday

		hour = int(delta / dhour)
		delta = delta % dhour

		min = int(delta / dmin)
		delta = delta % dmin

		sec = delta

		return (week, day, hour, min, sec)

	def _time_delta_txt(self, delta):

		tuple = self._time_delta_tuple(delta)
		(week, day, hour, min, sec) = tuple

		res = []

		if week > 0:
			res.append("%d week" % week)
		if day > 0:
			res.append("%d day" % day)
		if hour > 0:
			res.append("%d hour" % hour)
		if min > 0:
			res.append("%d min" % min)

		if len(res) == 0:
			res.append("some time")

		return " ".join(res) + " ago"

	def _get_status(self, delta):

		limit_good = 24 * 3600 * 2
		limit_old = 24 * 3600 * 7

		if delta <= limit_good:
			return 1

		elif delta <= limit_old:
			return 2

		else:
			return 0

	def _get_status_txt(self, status):
		
		if status == 1:
			return "Good"
		elif status == 2:
			return "Old"
		else:
			return "Outdated"

			

#
# Scan sync log
#

reports = {}

for pkg in pkgs:
	log_dir = path.join(base, "log", "sync", pkg)
	if not path.isdir(log_dir):
		continue

	pkgreport = {}
	
	dirs = os.listdir(log_dir)
	dirs.sort()
	dirs.reverse()
	for dir in dirs:
		log_file = path.join(log_dir, dir, "sedot.log")
		status_file = path.join(log_dir, dir, "status.txt")

		if not path.isfile(status_file):
			continue

		status = status_read(status_file)
		if status['status'] == "301":  # Unable to gain lock
			continue

		status["+timestamp"] = dir

		if status['status'] == "200":  # Success
			pkgreport["sync"] = status

			if pkgreport.get("last", None) == None:
				pkgreport["last"] = status
			
			break

		else:
			if pkgreport.get("last", None) == None:
				pkgreport["last"] = status
				
	reports[pkg] = pkgreport
	

#
# Generate report
#

packages = []

for pkg in reports:
	pkgreport = reports[pkg]
	report_last = pkgreport.get("last", None)
	report_sync = pkgreport.get("sync", None)

	obj = Package(pkg)
	obj.add_report(report_last, last=True)
	obj.add_report(report_sync, sync=True)

	packages.append(obj)

packages.sort(lambda a, b: cmp(a.name, b.name))

fo = open(path.join(base, "data", "report", "index.html"), "w")

rg = ReportGenerator(packages, fo)
rg.generate()
